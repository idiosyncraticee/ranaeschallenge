///////////////////var timelineData;var tabView;YAHOO.namespace("weReef");///// TO WORK IN OFFLINE MODE SET  YAHOO.weReef.online = 0; ///// TO WORK IN ONLINE MODE SET  YAHOO.weReef.online = 1; YAHOO.weReef.online = 1;if(YAHOO.weReef.online == 1) {  YAHOO.log("Proceeding in online mode", "info");   //google.load('visualization', '1', {'packages':['annotatedtimeline','gauge','table']});}YAHOO.util.Event.onDOMReady(getUserRPX);YAHOO.util.Event.onDOMReady(initTabView);//YAHOO.util.Event.onAvailable(generateTabInfo);//YAHOO.util.Event.onDOMReady(createListeners);  YAHOO.log("Right after create listeners", "info");//YAHOO.util.Event.onContentReady(attachUploader);//execute initButtons when the button container is available//YAHOO.util.Event.onContentReady("buttonbuttons", YAHOO.inventory.initButtons);  YAHOO.log("Afterall initTabView", "info"); var jsonObj = [];var activeParameter = [];function getUserRPX() {  YAHOO.log("Get data for this user", "info");     	var handleSuccessRPX = function(o) {    if(o.replyCode === undefined){      var loginReply = YAHOO.lang.JSON.parse(o.responseText);      if(loginReply.replyCode===201) {        YAHOO.log("Successfully retreived user data from the DB", "info");       } else if (loginReply.replyCode===505) {        //TOKEN IS EXPIRED        //alert(loginReply.error);        window.location = "./welcome.html";      } else {        alert(loginReply.replyText);      }  		//jsonObj=loginReply; // TODO: NEED TO MAKE THIS NOT BE GLOBAL      YAHOO.weReef.userid = loginReply.userid;      YAHOO.weReef.admin = loginReply.admin;      YAHOO.weReef.activation = loginReply.activation;       generateTabInfo();  	} else {        alert(o.replyText);        }	  };	var handleFailureRPX = function(o) {    alert('RPX failure');  };  	var callbackRPX = {    success:handleSuccessRPX,    failure:handleFailureRPX  };  YAHOO.log("Ready to get user data", "info");          var token = getURLParam('token');  if(!token && YAHOO.weReef.online == 1) {      window.location = "./welcome.html";	  YAHOO.util.Dom.get('statusMsgSpan').innerHTML='No token given';  } else {    YAHOO.log("Loading the RPX user info", "info");      if(YAHOO.weReef.online == 1) {       	var sUrl = "./userRPXQuery.php?token=" + token; // admin";    } else {       	var sUrl = "./userRPXQuery.php?workoffline=1"; // TURN THIS ON IF ONLINE MODE";    }  	var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, callbackRPX);    YAHOO.log("Got the user data", "info");  }} function generateTabInfo(){		var myAdmin = function(o) {			YAHOO.weReef.userid = YAHOO.weReef.adminid;	    var tableSetup = {'tab':'adminTabDiv2', 'userid':YAHOO.weReef.userid, 'tableType':'Administrator', 'phpScript':'updateAdminDatabase.php', 'button':'1'};	    addBookkeeping( tableSetup); 	  }      if(YAHOO.weReef.admin) {    	  YAHOO.weReef.adminid = YAHOO.weReef.userid;    	  tabView.addTab( new YAHOO.widget.Tab({     		  label: 'Admin',    		  content: '<div id=adminTabDiv2></div>'    	  }));     	  tabView.getTab(4).addListener("click", myAdmin);      }         }function createListeners() {  var myLogReader = new YAHOO.widget.LogReader("loggerTabDiv");  YAHOO.widget.Logger.enableBrowserConsole();  YAHOO.log("Dom is loaded, now create Listeners", "info");     //define a button for loading an avatar  var avatarButton = new YAHOO.widget.Button("avatarButton");  avatarButton.addListener("click", grabAvatarLink);    //THE TRUE HERE MEANS ITS DEFAULT TO THE FIRST VIEW THAT GETS LOADED  YAHOO.weReef.dashboardModule = new YAHOO.widget.Module("dashboardModule", { visible: true });  YAHOO.weReef.dashboardModule.render();  YAHOO.util.Dom.get("myreef").setAttribute("class","makeBlue");    YAHOO.weReef.statusModule = new YAHOO.widget.Module("statusModule", { visible: false });  YAHOO.weReef.statusModule.render();  YAHOO.weReef.researchModule = new YAHOO.widget.Module("researchModule", { visible: false });  YAHOO.weReef.researchModule.render();  YAHOO.weReef.systemModule = new YAHOO.widget.Module("systemModule", { visible: false });  YAHOO.weReef.systemModule.render();  YAHOO.weReef.imageUploadDiv = new YAHOO.widget.Module("imageUploadDiv", { visible: false });  YAHOO.weReef.imageUploadDiv.render();      var hideModules = function() {    YAHOO.weReef.statusModule.hide();    YAHOO.weReef.dashboardModule.hide();    YAHOO.weReef.systemModule.hide();    YAHOO.weReef.researchModule.hide();    YAHOO.util.Dom.get("myreef").removeAttribute("class","makeBlue");    YAHOO.util.Dom.get("systems").removeAttribute("class","makeBlue");    //YAHOO.util.Dom.get("research").removeAttribute("class","makeBlue");    YAHOO.util.Dom.get("myprofile").removeAttribute("class","makeBlue");  }    var displayDashboard = function(e) {    YAHOO.log("Turn the dashboard on", "info", "example");//    YAHOO.weReef.statusModule.hide();    hideModules();    YAHOO.weReef.dashboardModule.show();    YAHOO.util.Dom.get("myreef").setAttribute("class","makeBlue");  }    var displayStatusWindow = function(e) {    YAHOO.log("Turn on the status display", "info", "example");//    YAHOO.weReef.dashboardModule.hide();    hideModules();    YAHOO.weReef.statusModule.show();    YAHOO.util.Dom.get("myprofile").setAttribute("class","makeBlue");    //generateUploader();     }  var displaySystems = function(e) {    YAHOO.log("Turn on the status display", "info", "example");    hideModules();              YAHOO.weReef.systemModule.show();    YAHOO.util.Dom.get("systems").setAttribute("class","makeBlue");        //generateSystemContent();     }  var displayResearch = function(e) {      YAHOO.log("Turn on the status display", "info", "example");    hideModules();      YAHOO.weReef.researchModule.show();    YAHOO.util.Dom.get("research").setAttribute("class","makeBlue");  }  var displayImageUpload = function(e) {      YAHOO.log("Turn on the image edit display", "info", "example");    YAHOO.weReef.imageUploadDiv.show();  }  var hideImageUpload = function(e) {      YAHOO.log("Turn off the image edit display", "info", "example");    YAHOO.weReef.imageUploadDiv.hide();  }          YAHOO.util.Event.addListener("userStatusDiv", "click", displayStatusWindow);  YAHOO.util.Event.addListener("myprofile", "click", displayStatusWindow);  YAHOO.util.Event.addListener("systems", "click", displaySystems);  YAHOO.util.Event.addListener("research", "click", displayResearch);  YAHOO.util.Event.addListener("myreef", "click", displayDashboard);  YAHOO.util.Event.addListener("editImage", "click", displayImageUpload);  YAHOO.util.Event.addListener("cancelUpload", "click", hideImageUpload);//   YAHOO.util.Event.addListener("uploadButton", "click", upload);  YAHOO.log("All listeners have been created", "info");       YAHOO.log("Second time all listeners are created", "info");}function initTabView() {  tabView = new YAHOO.widget.TabView('yui-main');	var myRanking = function(o) {    var tableSetup = {'tab':'myRankingTabDiv', 'userid':YAHOO.weReef.userid, 'tableType':'myRanking', 'phpScript':'updateRankingDatabase.php', 'button':'0'};    //addParameterSelection(tableSetup);    addBookkeeping( tableSetup);  }	var myJourney = function(o) {    var tableSetup = {'tab':'myJourneyTabDiv', 'userid':YAHOO.weReef.userid, 'tableType':'myJourney', 'phpScript':'updateJourneyDatabase.php', 'button':'1'};    //addParameterSelection(tableSetup);    addBookkeeping( tableSetup);  }  	var myExercise = function(o) {    var tableSetup = {'tab':'myExerciseTabDiv', 'userid':YAHOO.weReef.userid, 'tableType':'myExercise', 'phpScript':'updateExerciseDatabase.php', 'button':'1'};    addBookkeeping( tableSetup);  }  	var myFood = function(o) {    var tableSetup = {'tab':'myFoodTabDiv', 'userid':YAHOO.weReef.userid, 'tableType':'myFood', 'phpScript':'updateFoodDatabase.php', 'button':'1'};    addBookkeeping( tableSetup);                    }  //	var myAdmin = function(o) {//    var tableSetup = {'tab':'adminTabDiv', 'userid':YAHOO.weReef.userid, 'tableType':'Administrator', 'phpScript':'updateAdminDatabase.php'};//    addBookkeeping( tableSetup); //  }  	var myChart = function(o) {    addYUIChart();  }    tabView.getTab(1).addListener("click", myRanking);  tabView.getTab(2).addListener("click", myJourney);  tabView.getTab(3).addListener("click", myChart);  //tabView.getTab(3).addListener("click", myExercise);  //tabView.getTab(4).addListener("click", myFood);  //tabView.getTab(7).addListener("click", myAdmin);}function accountDetails() {  YAHOO.log("Show account details","info");  alert('there');};function addComponents(jsonObj, activeSystem) {//   addDashboard(activeSystem);  addDataTable(YAHOO.weReef.activeSystem);  addtextnotes(jsonObj, YAHOO.weReef.activeSystem);}function showUser(){  var uI = YAHOO.util.Dom.getElementsByClassName("userImage"); //THIS RETURNS AN ARRAY  for ( var i = 0; i < uI.length; i++ ){    uI[i].setAttribute("src",jsonObj['user_info']['avatar']);  }  //uI.setAttribute("src","./icon_no_photo_80x80.png");    var userName = YAHOO.util.Dom.getElementsByClassName("userName");   for ( var i = 0; i < uI.length; i++ ){      userName[i].innerHTML=jsonObj['user_info']['name'];  }  var userDuration = YAHOO.util.Dom.getElementsByClassName("userDuration");   for ( var i = 0; i < uI.length; i++ ){      userDuration[i].innerHTML=jsonObj['user_info']['registerDate'];  }  //   var userNameHeader = YAHOO.util.Dom.get("userNameHeader");//   userNameHeader.innerHTML += jsonObj['user_info']['name'];//   //   var userDurationModule = YAHOO.util.Dom.get("userDurationModule");//   userDurationModule.innerHTML += jsonObj['user_info']['registerDate'];//     var userEmail = YAHOO.util.Dom.get("userEmailSpan");  userEmail.innerHTML = jsonObj['user_info']['email'];  };//USED FOR THE DATATABLEvar myBuildUrl = function(datatable,record,formatting) {    //IF FORMATTING IS undefined it will turn into a url get call    //IF FORMATTING IS 'single' it will only return the id    var url = '';    var cols = datatable.getColumnSet().keys;    for (var i = 0; i < cols.length; i++) {        if (cols[i].isPrimaryKey) {            if(record.getData(cols[i].key)) {              if(formatting === undefined) {                url += '&' + cols[i].key + '=' + escape(record.getData(cols[i].key));              } else if (formatting === 'single') {                url += escape(record.getData(cols[i].key));              } else if (formatting === 'username') {                  url = escape(record.getData('username'));              }            } else {              if(formatting === undefined ) {                url += '&' + cols[i].key + '=undefined';              } else if (formatting === 'single') {                url += 'undefined';              }            }        }    }    return url;};//USED FOR THE DATATABLEvar myBuildObject = function(datatable,record) {    var url = {};    var cols = datatable.getColumnSet().keys;    for (var i = 0; i < cols.length; i++) {        if (cols[i].isPrimaryKey) {            if(record.getData(cols[i].key)) {              //url += '&' + cols[i].key + '=' + escape(record.getData(cols[i].key));              url[cols[i].key] = escape(record.getData(cols[i].key));            } else {              //url += '&' + cols[i].key + '=undefined';              url[cols[i].key] = 'undefined';            }        }    }    return url;};//USED FOR LOOKING UP THE VALUE OF ANOTHER CELL IN THE SAME ROW OF THE TABLEvar myItemId = function(datatable,record, columnName) {    var url = {};    var cols = datatable.getColumnSet().keys;    for (var i = 0; i < cols.length; i++) {        if (cols[i].key == columnName) {            if(record.getData(cols[i].key)) {              //url += '&' + cols[i].key + '=' + escape(record.getData(cols[i].key));              url[cols[i].key] = escape(record.getData(cols[i].key));            } else {              //url += '&' + cols[i].key + '=undefined';              url[cols[i].key] = 'undefined';            }        }    }    return url;};//USED FOR THE DATATABLEvar updateCell = function(datatable,record,value,column) {    if(column !== undefined) {      var cols = datatable.getColumnSet().keys;      for (var i = 0; i < cols.length; i++) {        if (cols[i].key === column) {          datatable.updateCell(record, cols[i], value);        }      }    } else {      var cols = datatable.getColumnSet().keys;      for (var i = 0; i < cols.length; i++) {          if (cols[i].isPrimaryKey) {            datatable.updateCell(record, cols[i], value);          }      }        }};function getURLParam(strParamName){  var strReturn = "";  var strHref = window.location.href;  if ( strHref.indexOf("?") > -1 ){    var strQueryString = strHref.substr(strHref.indexOf("?")).toLowerCase();    var aQueryString = strQueryString.split("&");    for ( var iParam = 0; iParam < aQueryString.length; iParam++ ){      if (aQueryString[iParam].indexOf(strParamName.toLowerCase() + "=") > -1 ){        var aParam = aQueryString[iParam].split("=");        strReturn = aParam[1];        break;      }    }  }  return unescape(strReturn);}/* * Date Format 1.2.3 * (c) 2007-2009 Steven Levithan <stevenlevithan.com> * MIT license * * Includes enhancements by Scott Trenda <scott.trenda.net> * and Kris Kowal <cixar.com/~kris.kowal/> * * Accepts a date, a mask, or a date and a mask. * Returns a formatted version of the given date. * The date defaults to the current date/time. * The mask defaults to dateFormat.masks.default. */var dateFormat = function () {	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,		timezoneClip = /[^-+\dA-Z]/g,		pad = function (val, len) {			val = String(val);			len = len || 2;			while (val.length < len) val = "0" + val;			return val;		};	// Regexes and supporting functions are cached through closure	return function (date, mask, utc) {		var dF = dateFormat;		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {			mask = date;			date = undefined;		}		// Passing date through Date applies Date.parse, if necessary		date = date ? new Date(date) : new Date;		if (isNaN(date)) throw SyntaxError("invalid date");		mask = String(dF.masks[mask] || mask || dF.masks["default"]);		// Allow setting the utc argument via the mask		if (mask.slice(0, 4) == "UTC:") {			mask = mask.slice(4);			utc = true;		}		var	_ = utc ? "getUTC" : "get",			d = date[_ + "Date"](),			D = date[_ + "Day"](),			m = date[_ + "Month"](),			y = date[_ + "FullYear"](),			H = date[_ + "Hours"](),			M = date[_ + "Minutes"](),			s = date[_ + "Seconds"](),			L = date[_ + "Milliseconds"](),			o = utc ? 0 : date.getTimezoneOffset(),			flags = {				d:    d,				dd:   pad(d),				ddd:  dF.i18n.dayNames[D],				dddd: dF.i18n.dayNames[D + 7],				m:    m + 1,				mm:   pad(m + 1),				mmm:  dF.i18n.monthNames[m],				mmmm: dF.i18n.monthNames[m + 12],				yy:   String(y).slice(2),				yyyy: y,				h:    H % 12 || 12,				hh:   pad(H % 12 || 12),				H:    H,				HH:   pad(H),				M:    M,				MM:   pad(M),				s:    s,				ss:   pad(s),				l:    pad(L, 3),				L:    pad(L > 99 ? Math.round(L / 10) : L),				t:    H < 12 ? "a"  : "p",				tt:   H < 12 ? "am" : "pm",				T:    H < 12 ? "A"  : "P",				TT:   H < 12 ? "AM" : "PM",				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]			};		return mask.replace(token, function ($0) {			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);		});	};}();// Some common format stringsdateFormat.masks = {	"default":      "ddd mmm dd yyyy HH:MM:ss",	shortDate:      "m/d/yy",	mediumDate:     "mmm d, yyyy",	longDate:       "mmmm d, yyyy",	fullDate:       "dddd, mmmm d, yyyy",	shortTime:      "h:MM TT",	mediumTime:     "h:MM:ss TT",	longTime:       "h:MM:ss TT Z",	isoDate:        "yyyy-mm-dd",	isoTime:        "HH:MM:ss",	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};// Internationalization stringsdateFormat.i18n = {	dayNames: [		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"	],	monthNames: [		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"	]};// For convenience...Date.prototype.format = function (mask, utc) {	return dateFormat(this, mask, utc);};